div.input>(span.input_label+input.input_field+sapn.input_clear{x})

<div class="input">
	<span class="input_label"></span>
	<input type="text" class="input_field" />
	<span class="input_clear">x</span>
</div>

///////////////////////////////////////////////////////////////////////////////////////
модальное окно

.buy-modal {
	position: absolute;
	display: block;
	width: 200px;
	height: 200px;
	padding: 10px;
	left: 0;
	right: 0;
	bottom: 0;
	top: 0;
	margin: auto;
	background: #9fd;
}

.buy-modal_hide {
	display: none;
}


///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////

wowjs
https://wowjs.uk/

Animate.css!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
https://daneden.github.io/animate.css/

animate.js
///////////////////////////////////////////////////////////////////////////////////////



теги
атребуты

свойства
методы
	-параметр (при объявлении)
	-аргумент (при вызове)

селекторы
псевдоэлемент
Селекторы атрибутов

div {}
#id_класса {}
.класс {}
селектор: псевдоэлемент {}
селектор.класс: псевдоэлемет {}

[атрибут] {}
Селектор[атрибут] {}           //пробел между именем селектора и квадратными скобками не допускается

[атрибут="значение"] {} 
Селектор[атрибут="значение"] {}

[атрибут^="значение"] {}           //значение атребута начинается с определённого текста
[атрибут$="значение"] {}           //значение отребута заканчивается определённым текстом
[атрибут*="значение"] {}           //Значение атрибута содержит указанный текст
[атрибут~="значение"] {}           //Одно из нескольких значений атрибута [class~="block"] h3 { color: green; } 
[атрибут|="значение"] {}           //DIV[class|="block"]         <div class="block-menu-therm"> (для отделения дефисов)

[атрибут1="значение1"][атрибут2="значение2"] {} 
Селектор[атрибут1="значение1"][атрибут2="значение2"] {}

input[type="text"] {}       //Селекторы атрибутов
input[type="button"] {}     //Селекторы атрибутов


* {margin: 0;}
*:after {CSS-стили}

p > strong {}             // Дочерний селектор - у strong-а родитель p

//сёстренский селекторы (имеют общего родителя)
h1 + p {}                 //выберет все первые абзацы, идущие непосредственно за любым тегом <h1>,
                          //не затрагивая остальные абзацы;

h1 ~ p {}                 //выберет все абзацы, являющиеся сестринскими по отношению к любому заголовку h1
                          //и идущие сразу после него.


НАСЛЕДОВАНИЕ
	к текстовому содержимому страницы:
		color, font, letter-spacing, line-height, list-style, text-align, text-indent, text-transform,
		visibility, white-space и word-spacing
	в блочных элементах свойства не наследуются
		background, border, display, float и clear, height и width, margin, min-max-height и -width,
		outline, overflow, padding, position, text-decoration, vertical-align и z-index
	Принудительное наследование
		inherit можно заставить наследовать свойства родительского элемента которые
		не наследовуются по умолчанию

	
	1) Стили могут наследоваться от родительского элемента (наследуемые свойства или с помощью значения inherit);
	2) Стили, расположенные в таблице стилей ниже, отменяют стили, расположенные в таблице выше;
	3) К одному элементу могут применяться стили из разных источников. (можно посмотреть в браузере)
	4) При определении стиля можно использовать любую комбинацию селекторов — селектор элемента,
	псевдокласса элемента, класса или идентификатора элемента.

	<div id="wrap" class="box clear"></div>

	div {border: 1px solid #eee;}
	#wrap {width: 500px;}
	.box {float: left;}
	.clear {clear: both;}


КАСКАД (к одному элементу применяется разные css правила)
	правило !important	Такое объявление будет иметь приоритет над всеми остальными правилами. 
		Это правило позволяет отменить значение свойства и установить новое для элемента из группы элементов в 		случае, когда нет прямого доступа к файлу со стилями.
	Специфичность
		для id добавляется 0, 1, 0, 0;
		для class добавляется 0, 0, 1, 0;
		для каждого элемента и псевдоэлемента добавляется 0, 0, 0, 1;
		для встроенного стиля, добавленного непосредственно к элементу — 1, 0, 0, 0;
		универсальный селектор не имеет специфичности.


		h1 {color: lightblue;} /*специфичность 0, 0, 0, 1*/
		em {color: silver;} /*специфичность 0, 0, 0, 1*/
		h1 em {color: gold;} /*специфичность: 0, 0, 0, 1 + 0, 0, 0, 1 = 0, 0, 0, 2*/
		div#main p.about {color: blue;} /*специфичность: 0, 0, 0, 1 + 0, 1, 0, 0 + 0, 0, 0, 1
			+ 0, 0, 1, 0 = 0, 1, 1, 2*/
		.sidebar {color: grey;} /*специфичность 0, 0, 1, 0*/
		#sidebar {color: orange;} /*специфичность 0, 1, 0, 0*/
		li#sidebar  {color: aqua;} /*специфичность: 0, 0, 0, 1 + 0, 1, 0, 0 = 0, 1, 0, 1*/

		В результате к элементу применятся те правила, специфичность которых больше.
		Например, если на элемент действуют две специфичности со значениями 0, 0, 0, 2 и 0, 1, 0, 1,
		то выиграет второе правило.

	Порядок подключённых таблиц
		Если в разных таблицах будут встречаться разные значения свойств одного элемента,
                то в результате к элементу применится правило, находящееся в таблице стилей, идущей в списке ниже.




<audio src=""></audio>
<video src=""></video>
<canvas></canvas>


можно одному элементу присваевать несколько классов
<div class="test1 test2"></div>

margin               // auto     -для вертикальных отступов вычисляется как 0.
                     //
                     //           margin-left:0 (margin-right:auto) - элемент сдвинется в лево
                     //           margin-right:0 (margin-left:auto) - элемент сдвинется в право
                     //           margin-left:auto и margin-right:auto - ТО ЦЕНТРИРУЕТСЯ ПО СЕРЕДИНЕ!!!!
                     //
                     // 100px
                     // 10%      -относительно ширины или высоты области содержимого родительского элемента
                     // -100px
                     // inherit  -значение наследуется от родительского элемента
                     // для блочного (все стороны) так и для inline (но только по горизонтали)

border               //
padding              //10px
                     //10% - относительно ширины или высоты области содержимого родительского элемента
                     //inherit - значение наследуется у родительского элемента
                     //значение по умолчанию 0

//margin-top, margin-bottom, margin-left, margin-right
//border-top

width:100px;         //50%
                     //auto
                     //100px
height:auto;         //50%
                     //auto
                     //100px
//есть свойство которое определяет что считать width чисто контент, контент + padding, конетнт + padding + border
box-sizing: border-box;

top                  //auto, 100px, -100px, 20%, inherit (значения по умолчанию auto)
bottom
left
right



//выравнивания по центру блочного элемента
width:1200px;
margin:0 auto;

max-height
min-height

//левое выравнивание блочного элеметна
float:left;
width:100px;

//выравнивание по высоте
line-height: 100px;
height:100px;


visibility:hidden;     -указывает должен ли быть видем элемент или нет (место всё равно занимает)

//выравнивание inline элементов
text-align: left;    //centr, right, left, justify (по ширине)



16px размер шрифта по умолчанию

//жирность шрифта
font-weight:400px;

//межстрочный интервал (отсчёт ведётся от базовой линии)
line-height:100px;

//выравнивание текста по вертикали относительно своего родителя
vertical-align: baseline;


//трансформация
transform: rotate(90deg) scale(0.5);


//Анимация!!!!!!!!!!!!!!!!!!!
transition:5s all;
transition:5s transform;
transition:5s width;


//задания фона
background-color       -цвет фона
background-image       -фоновое изображение относительно css файла
background-repeat      -повторение
background-attachment  -пристыковка
background-position    -положение




display:
	inline       -игнорирует width, height, margin
	block
	none         -не виден элемент
	inline-block -есть width, height, margin
	list-item    -как элемент списка обычно с добавлением маркера
	flexbox      -!!!!!!!
	grid         -!!!!!!!
	table
	inline-table
	table-cell
	table-column



position:
	absolute   - положение задаётся с помощью свойств left, top, right, bottom от родительского элемента (если у родителя position не static) или от окна браузера
             right:0px; выравнивание по правому краю
	
	fixed      - задаётся с помошью left, top, right, bottom от окна браузера и не миняет свойго положения при прокрутки
	
	relative   - положение места задаётся относительно его исходного места. Добавления свойств top, bottom, left, right сдвигает его от первоночального расположения

	static     - элементы распологаются как обычно


//элементы выравниваются по нужному краю а остальные обтекают с другой стороны
float: left;       //right, none

//не допускаются обтекание с указанной стороны
clear: left;       //left, right, both, none

z-index:-1;


//указывает что делать елси область внутреннего элемента привосходит область текущего элемента
overflow: scroll;     //scroll - отобразить прокрутку, hidden - потеряется, auto

////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////

p div {}                             //p содержит div (стиль для div)
.home li {}                          //.home содержит li

<div class="home">
	<li></li>
	<li></li>
	<li></li>
</div>


//часть изображения (спрайты)
img.home                             //img с классом home
{
	width:100px;
	height:100px;
	background:url(images/image.png) 0 0;
}


//при наведеним---------------
div:hover {}

.message:hover {}







input:focus {}                   //выбираем все элементы которые имеют фокус ввода
p:before {
	content:"text";
}
p:after {
	content:"text";
}




<img src="test.png" onmouseover="this.style.opacity=1" onmouseout="this.style.opacity=0.4" />




//отображение ссылок в виде блоков делает всю область ссылки пригодной для клика (а не только текст)
//а также позволяет нам указать ширину
a {
	display:block;

	text-align:center;
	text-decoration:none;       //чтоб не было подчёркивания на ссылках
	padding:10px;               //можно увеличить размер области
}


//горизонтальная панель навигации
1 способ   li {display:inline;}
2 способ   li {float:left;} 
           a {display:block;}






border-radius:100px;


background-image:url(image/1.jpg);          //относительно css файла
opacity:1;                                  //1 - полностью видемый, 0.5 наполовину видимый

box-shadow:-3px 4px 7px #000000;            //7px это размытие
text-shadow:1px 4px 9px black;

/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
центрирование фоновой картинки
background-image: url("image/test.png");
background-position-x:center;
background-position-y:center;
background-repeat: no-repeat;
backround-size: cover;
backround-color: rgb(255,255,255);




background: #66806E url(images/clover.png) repeat-y;              //repeat-y!!!!!!!!!!!!!!!!
background-position-x: 95%; /* Положение фона */
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////

contenteditable
<meta charset="utf-8" />
<meta name="description" content="" />
<meta name="keywords" content="" />

<pre>
	...
	как пишеься так и есть
	...
</pre>


<h1>
<p>
<span>
<b>
<del>
<i>
<u>
<sub> - текст под строкой
<sup> - текст над строкой

<ul>
	<li>элемент списка 1</li>
	<li>элемент списка 2</li>
</ul>

list-style-type:none;
list-style-image:url(....png);



<img src="" alt="описание" />




<table>
	<tr>
		<td rowspan="2">1</td>
		<td>2</td>
		<td>3</td>
	</tr>
	<tr>
		<td colspan="2">1</td>
		<td>2</td>
		<td>3</td>
	</tr>
<table>






<form method="post" action="test.php">
	<input type="text" name="fio" placeholder="текст виден когда поле ввода чисто" />
	<input type="submit" value="войти" />
</form>



type:
	text
	password
	radio
	checkbox
	hidden                  - !!!!!!!!!!!!!!!!!!!
	submit                  - кнопка отправки данных форму
	color
	date
	datetime
	datetime-local
	email
	month
	number
	image                  - кнопка с картинкой
	file                   - для отправки файлов
	url
	week
	time
	tel
	range                  - ползунок



<button>
<select>
<label for="id_поля_ввода">
<textarea cols=5 rows=10 >





<input type="text" name="model" list="phonelist" />          !!!list="phonelist"
<datalist>
	<option value="iphone5s" label="5400" />
	<option value="iphone6" label="8700" />
</datalist>

input свойства:
	maxlength   - максимальное колтчество допустимых символов
	pattern
	placeholder
	readonly    - только для чтения
	required    - обезательный для ввода
	size        - ширина поля в символах
	dizabled
	autofocus



input:focus {
}

a:not(.test) {
}



/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////
Селектор псевдокласса

:link — не посещенная ссылка;
:visited — посещенная ссылка;
:hover — любой элемент, по которому проводят курсором мыши;
:focus — интерактивный элемент, к которому перешли с помощью клавиатуры или активировали посредством мыши;
:active — элемент, который был активизирован пользователем;
:valid — поля формы, содержимое которых прошло проверку в браузере на соответствие указанному типу данных;
:invalid — поля формы, содержимое которых не соответствует указанному типу данных;
:enabled — все активные поля форм;
:disabled — заблокированные поля форм, т.е., находящиеся в неактивном состоянии;
:in-range — поля формы, значения которых находятся в заданном диапазоне;
:out-of-range — поля формы, значения которых не входят в установленный диапазон;
:lang() — элементы с текстом на указанном языке;
:not(селектор) — элементы, которые не содержат указанный селектор — класс, идентификатор, название или тип поля формы — :not([type="submit"]);
:target — элемент с символом #, на который ссылаются в документе;
:checked — выделенные (выбранные пользователем) элементы формы.
