пакет
модуль

ES Modules		  это стандарт но пока нужно использовать системы сборки (webpack,brunch,Babel.JS)
CommonJS		  система модулей, встроенна в сервер Node.JS
AND				  старая система require.js
UMD				  система модулей, которая предложена в качестве универсальной. UMD-модули будут работать и в системе AMD и в CommonJS.

///////////////////////////////////////////////////////////////////////////////////////////////////////
число	   (parseInt,parseFloat) (parseFloat(data.allBall).toFixed(1))
строка
bool

object

null
undefined


переменные, параметры, методы, свойства

компилятор JavaScript пробегает по коду в два этапа:
	-1 Распознаёт переменные
		- функции часный случай. Когда вызываем функцию создаётся LexicalEnvironment и записываеются туда
		параметры, создаются переменный равные undefined; и переменную [[Scope]] которая ссылается
		на LexicalEnvironment вызванной функции
		https://learn.javascript.ru/closures
	-2 Выполение кода
		если в процессе выполнение не была найдена переменная в местном окружении (LexicalEnvironment) тогда она
		ищется во внешнем (LexicalEnvironment) ([[Scope]])


Интерпретатор, при доступе к переменной, сначала пытается найти переменную в текущем LexicalEnvironment, а затем, если её нет – ищет во внешнем объекте переменных. В данном случае им является window.
При ЗАПУСКЕ функции её объект переменных LexicalEnvironment получает ссылку на «внешнее лексическое окружение» со значением из [[Scope]].
Если переменная не найдена в функции – она будет искаться снаружи.




var user = {							  // либо var user = {};  //либо var user = new Object();
	a: "Петя",
	b: 10,
	"b1": 11,							  //можно с кавычками
	"test t":12,						  //можно с кавычками и с пробелом
	f1:function() {
		console.log(this.a);
	},
	capital:{							  //могут буть другие более сложные объекты
        name: "Берлин",
        population: 3375000,
        year: 1237
    },
	languages: ["немецкий", "французский", "итальянский"],
	cities: [
        { name: "Цюрих", population: 378884},
        { name: "Женева", population: 188634},
        { name: "Базель", population: 164937}
    ]
}

user.c = "слово";
user["d"] = 30;               // в [ ] можно указать переменную которая будет содержаит имя свойства (СИНТАКСИС МАССИВОВ)
user["f0"] = function (){
}

user.f1();
user["f1"]();
console.log(user["test t"]); //название с пробелом

//user.__proto__              //- присваевается функцией конструктором !!!!! присутствует у любого объекта

//перебор свойсв
for(var key in user) {
    console.log( key + " : " + user[key] );
}

//удаляем свойства
delete user.name;


//Шаблон, Класс (конструктор объекта)------------------------------------------------------------------------
function User(a, b) {
	this.a = a;
	this.b = b;
	var c = "текст";          //private переменная	!!! инкапсуляция, скрытия переменной  !!! ЭТО И ЕСТЬ ЗАМЫКАНИЕ
	this._d = 20;			  //protected переменная (может изменятся только в унаследованных классах)

	this.f1 = function () {
		console.log(this.a + "    " + this.b);
	}

	this.f2 = function () {
		console.log(this.a + "    " + this.b);
	}.bind(this);			  //для того чтоб сохранить контекст this если будем вызывает как setTimeout(user.f2, 1000);


	//=============================
	var _public = this;
	var _private = {};		  //!!! можно не использовать а использовать только просто переменные они всё равно будут в замыкании

	_public.e = 20;
	_public.f3 = function () {
	}
}



//статическая переменная
User.t = 10;

//статическая функция
User.f5 = function () {
	console.log(this.t);                       //!!! для доступа к t используется this (this == User)
}

//переменные в прототипах
User.prototype.a = "текст";					   //если объект (экземпляр класса) не найдёт переменную у себя будет искать в прототипах

//функции в прототипах     - обычно так и нужно их там хранить
User.prototype.func6 = function () {
	console.log(this.a + "   " this.b);         //this.a и this.b переменные в обычном объекте созданном через конструктор User
}

//В то же время мы можем определить в объекте свойство, которое будет назваться также, как и свойство прототипа.
//собственное свойство объекта будет иметь приоритет перед свойством прототипа



//наследования------------------------------------------------------------------------
function Emploee (a, b, c) {
	//User.call(this);
	User.apply(this, arugument);				 //! наследование методов

	this.z = 100;

	//переопределения метода с возможностью вызвать базовый метод
	var parentF1 = this.f1;

	this.f1 = function () {						 //переопределение функции
		//parentF1.call(this);					 //если в нутри функции переменные используются без _public а через this
		parentF1();								 //если в нутри функции переменные используют _public

		//... свои какието действия
	}
}


Emploee.prototype = new Object(User.prototype);	  //создание нового объекта с прототипом от User который будет протоипом для Emploee
Emploee.prototype.constructor = Emploee;		  //? пока не знаю зачем делается



var user = new User();
alert(user instanceof User); //true - user это экземаляр User -а (!!!!!! притом берётся вся ленейка __proto__) (!!! учитывается наследования)


var employee = new Employee();

alert( employee.hasOwnProperty('z') );     // true: z принадлежит Emploee   !!!!!!!!!!!!! проверяет принадлежит ли
alert( employee.hasOwnProperty('a') );     // false: a не принадлежит

преобразование-----------------------------------------------
.valueOf();		//вызывается при численных преобразование, если этого метода нет то вызывается toString()
.toString();	//вызывается при строковых преобразование
.toJSON();		//перечисляются все свойства кроме функций


alert(obj);                        // строковое преобразование
obj + 10 арефметические операции   // численное преобразование
if(obj){}						   // логическое преобразование

//есть 2 стадии преобразование
//если в if то сначало valueOf потом к bool




//функции обвертки - Функции декораторы возвращают функцию которая что то делает вокруг передаваемой функции (как бы расширяя возможности)
//функции декораторы - проверки доступа
//примиси			   (например для добавление функционала событий)

сохринить контекст-------------------------------------------------------------
var f2 = f1.bind(o3); //o3 - привязонный контекст, f2 - новая функция с контекстом o3



-------------------------------------------------------------------------------
prototype - у функций, присваевает значеня __proto__ объекту
__proto__ - у объектов присваевается конструктором
-------------------------------------------------------------------------------

в setTimeout и в XMLHttpRequest - теряется контекст
setTimeout(f1, 1000); //в функции f1 потеряется контекст
//решение проблемы
 - обвертка
 - bind

var x = Object.create(null);//нет прототип, для коллекции самое то


//есть ли метод
if("name" in user) {}
				  
if (user.name !== undefined) {}

if (user.hasOwnProperty("name")) {}




typeof name;  - получаем тип переменной
typeof(name); - получаем тип переменной

-------------------------------------------------------------------------------
контекст

var _age = age;

this.getAge = function() {
        return _age;
}

this.setAge = function(age) {
	if(typeof age === "number" && age >0 && age<110){
		return _age = age;
	} else {
		console.log("Недопустимое значение");
	}
}




-------------------------------------------------------------------------------
// сериализация
var serializedUser = JSON.stringify(user);                            //!!! сериализация (преобразовать в строки)
// десериализация
var tomUser = JSON.parse(serializedUser);                             //!!! десериализация  (!!!! в именах обезательно должны быть кавычки)


/////////////////////////////////////////////////////////////////////////////////////
МОДУЛЬ
///////////////////////////////////////////////////////////////////////////////////// 

;(function () {
	//...
}());


-------------------------------------------------------------------------------
контекст

var user = {
  name: "Вася",
  hi: function() { alert(this.name); },
  bye: function() { alert("Пока"); }
};

user.hi(); // Вася (простой вызов работает)

//потеря контекста
(user.name == "Вася" ? user.hi : user.bye)(); // undefined

//а можно
(user.name == "Вася" ? user.hi : user.bye).call(user);





/////////////////////////////////////////////////////////////////////////////////////////////////////////

!!!!!!
this это контекст выполнения функции
!!!!!

!!!!!!!!!!!!!!!!!!!!!!!!!!
Если функция не является МЕТОДОМ или КОНСТРУКТОРОМ, this всегда указывает на window (или undefined в строгом режиме)
!!!!!!!!!!!!!!!!!!!!!!!!!!




























element node
text node
document
коментарии

браузер загружает теги последовательно


дочернии элементы
потомки


forEach, map, push, pop



//получить секцию head
document.documentElement.children[0]
document.documentElement.firstChild
document.head

document.body.children[1]
document.body.children[1].children[1];


///////////////////////////////////////////////////////////////////////////////////////
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

<div id="content-holder">
  <div id="content">Элемент</div>
</div>

<script>
  alert( content ); // DOM-элемент
  alert( window['content-holder'] ); // в имени дефис, поэтому через [...]
</script>


var elements = document.getElementsByTagName('div');








 <td>
      <label>
        <input type="radio" name="age" value="young" checked> младше 18
      </label>
      <label>
        <input type="radio" name="age" value="mature"> от 18 до 50
      </label>
      <label>
        <input type="radio" name="age" value="senior"> старше 60
      </label>
    </td>
  </tr>



var tableElem = document.getElementById('age-table');
var elements = tableElem.getElementsByTagName('input');





///////////////////////////////////////////////////////////////////////////////////////
свои атребуты

var elem = document.querySelector("[data_cip]")
var vlueCustomAttribute=elem.getAttribute('data_cip');


///////////////////////////////////////////////////////////////////////////////////////
строки
.toLowerCase()
.toUpperCase()

str.indexOf("Widget")        //поиск подстроки (-1 если не найдена)
str.indexOf(target, pos);    //поиск с определённой позиции

str.substring(start, end);   //взятие под строки (если end нет то до конца), end конечная позиция
	Отрицательные аргументы интерпретируются как равные нулю.
	Слишком большие значения усекаются до длины строки

	Кроме того, если start > end, то аргументы меняются местами,
	т.е. возвращается участок строки между start и end:

substr(start, length)        //взятие под строки (length - количество символов)

slice(start [, end])         //не включает позицию end то же что substring
	Отрицательные значения отсчитываются от конца строки:
	"testme".slice(-2);  // "me", от 2 позиции с конца
	"testme".slice(1, -1)  // "estm", от 1 позиции до первой с конца.






















4 способа вызова

как функция
как метод
как конструктор
через call, apply


///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
var x = ['a', 'b', 'c', 'd', 'e'];

var str = x.join(',');

console.log(str);
 //выведет "a,b,c,d,e"

///////////////////////////////////////////////////////////////////////////////////

var paths = {
  css:['path/to/style1.css', 'path/to/style2.css'],
  script:['path/to/script1.js', 'path/to/script2.js']
};

gulp.watch(paths.css, function(){                             //paths.css
  console.log('seen css changes');
});
gulp.watch(paths.script, function(){                          //paths.script
  console.log('seen javascript changes');
});




///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
var obj = {
	p: 777,
	method:function(){
		console.log( this.p );
	}
}

obj.method(); //выведет "777"

///////////////////////////////////////////////////////////////////////////////////

function Cons() {
	this.p = 777;
	console.log( this.p );
}

new Cons(); //выведет "777"

///////////////////////////////////////////////////////////////////////////////////

function Cons( a ) {
	this.p = a;
	console.log( this.p );
}

new Cons("test 1"); //выведет "test 1"
new Cons("test 2"); //выведет "test 2"
new Cons("test 3"); //выведет "test 3"

///////////////////////////////////////////////////////////////////////////////////

function Cons () {
	this.p = 444;

	function pM() {
		console.log( this.p );              //!!!!!!!!!!!!!! выведет "undefine"
	}

	this.method = function() {
		pM();                               //! this будет window (global в nodejs)
	}
}

(new Cons()).method();

///////////////////////////////////////////////////////////////////////////////////

function Cons () {
	this.p = 444;
	var self = this;

	function pM() {
		console.log( self.p );              //!!!!!!!!!!!!!! выведет "444" (сработает замыкание)
	}

	this.method = function() {
		pM();                               
	}
}

(new Cons()).method();


///////////////////////////////////////////////////////////////////////////////////


function Cons () {
	this.p = 444;

	function pM() {
		console.log( this.p );              //!!!!!!!!!!!!!! выведет "444" (сработает замыкание)
	}

	this.method = function() {
		pM.call(this);                               
	}
}

(new Cons()).method();

///////////////////////////////////////////////////////////////////////////////////


var obj = {
	p: 444,
	method: function() {
		console.log( this.p );
	}
}

var TRAP = {
	p:"11111111111"
}

obj.method.call( TRAP ); //!!! выведет "11111111111"


///////////////////////////////////////////////////////////////////////////////////

var obj = {
	p: 444,
	method: function(a, b) {
		console.log( this.p, a, b );
	}
}

var TRAP = {
	p:"11111111111"
}

obj.method.call( TRAP, 34, 56 ); //!!! выведет "11111111111 34 56"
obj.method.apply( TRAP, [34, 56] ); //!!! выведет "11111111111 34 56"




///////////////////////////////////////////////////////////////////////////////////

function func() {
	var arg = arguments;
	console.log(arg instanceof Array);          //!!!!! выведет false
	
	//var arg = [].slice.call( arguments );
	console.log(arg instanceof Array);          //!!!!! выведет true
}

function (3, 4, 5, 6);


///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
промисы

var promise = new Promise(function (resolve, reject){
	setTimeout(function() {
		resolve();
	}, 500);
});

promise.then(function() {
	console.log('done');
});


////////////////////////////////////////////////////////////////////////////////////

var promise = new Promise(function (resolve, reject){
	setTimeout(function() {
		resolve();
	}, 500);
});

promise.then(function() {
	var i = 500;
	return i;
}).then(function(val){
	return val*3;
}).then(function(val){
	return val/100;
}).then(function(val){
	console.log(val);
});

////////////////////////////////////////////////////////////////////////////////////
для чего нужны промисы?


//вместо:

$.ajax({
	sucess: function(id){
		$.ajax({
			sucess: function(id){
				$.ajax({
					sucess: function(id){
					}
				});
			}
		});
	}
});

//писать:
...
.then(function(id){
	//если возвращаем promise то выполняется всё АСИНХРОННО (в следующем then)
	return new Promise(function(resolve, reject){
		//...
	})

	//если возвращаем обычное значение то выполняется СИНХРОННО (в следующем then)
})

.then(

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////

function f() {
	console.log(this);
}

var o = {
	yo:f
}

o.yo();

//выведет обект o


///////////////////////////////////////////////////////////////////////////////////

function f() {
	console.log(this);
}

f.call({});
f.apply({});

///////////////////////////////////////////////////////////////////////////////////

function f() {
	console.log(this);
}

new f(); //new f

///////////////////////////////////////////////////////////////////////////////////

функция это тоже объект у которого есть своства

function A---------------------------
key         val
...         ...
...         ...
...         ...
__proto__   указатель на объект
prototype   ----------------------
            constructor  ... указывает на function A
            ...          ...
            ...          ...
            __proto__    ...


///////////////////////////////////////////////////////////////////////////////////
если мы используем функцию как конструктор

function f(){
	// this = {}
	// this.__proto__ = f.prototype;

	// some code

	// return this;
}

///////////////////////////////////////////////////////////////////////////////////

function Person(firstName, lastName, born) {
	// this = {}

	this.firstName = firstName;
	this.lastName = lastName;
	this.born = born;

	this.age = function() {
		var now = new Date();
		return now.getFullYear() - this.born;
	}

	//return this;
}

var iam = new Person('Yura', 'Fedorenko', 1990);

iam.age(); // 28

///////////////////////////////////////////////////////////////////////////////////

если пример выше сделать через прототипы

function Person(firstName, lastName, born) {
	// this = {};
	// this.__proto__ = Person.prototype;

	this.firstName = firstName;
	this.lastName = lastName;
	this.born = born;

	//return this;
}

Person.prototype.age = function() {
	var now = new Date();
	return now.getFullYear() - this.born;
}

var iam = new Person('Yura', 'Fedorenko', 1990);

iam.age(); // 28

///////////////////////////////////////////////////////////////////////////////////

тоже самое в стили ECMA 2015

class Person {
	constructor(firstName, lastName, born) {
		this.firstName = firstName;
		this.lastName = lastName;
		this.born = born;
	}

	age() {
		var now = new Date();
		return now.getFullYear() - this.born;
	}
}

const iam = new Person('Yura', 'Fedorenko', 1990);

iam.age(); // 28

///////////////////////////////////////////////////////////////////////////////////

// !!!!!!!!!!

() => {var z=10; return z;}
(a,b) => a+b
e => e.test()
в функции стрекли тотже this что и снаружи

без фигурных скобок ({}) возвращает всё что с права
с фигурными стрелками ({}) нужно писать return

'use strict';

let group = {
  title: "Наш курс",
  students: ["Вася", "Петя", "Даша"],

  showList: function() {
    this.students.forEach(
      student => alert(this.title + ': ' + student)
    )
  }
}

group.showList();

///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
СОБЫТИЯ

<button onclick="alert('test')">
	click me
</button>

///////////////////////////////////////////////////////////////////////////////////

<button onclick="load()">
	click me
</button>

<script>
	function load() {
		alert('test');
	}
</script>

///////////////////////////////////////////////////////////////////////////////////

<button id='btn'>
	click me
</button>

<script>
	document.getElementById('btn').onclick = function() {
		alert('test');
	}
</script>


///////////////////////////////////////////////////////////////////////////////////
метод addEventListener

<button id='btn'>
	click me
</button>

<script>
	document.getElementById('btn').addEventListener('click', function() {
		alert('test');
	});
</script>

///////////////////////////////////////////////////////////////////////////////////
детальнее об методе addEventListener

<button id='btn'>
	click me
</button>

<script>
	document.getElementById('btn').addEventListener('click', function() {
		alert('test');
	},
	{
		capture: true,
		once: true,
		passive: true
	});
</script>


///////////////////////////////////////////////////////////////////////////////////
объект event

<button id='btn'>
	click me
</button>

<script>
	document.getElementById('btn').addEventListener('click', function(event) {      //!!! event
		console.log(event);                                                     //!!! event
	});
</script>

//event.target
//event.currentTarget         event.currentTarget === this      //!!! текущий объект который обрабатывает события


///////////////////////////////////////////////////////////////////////////////////
//повесили события на каждый li
//можно сделать более лучше пример ниже когда мы вешаем события на родитель (контенер)

<ul>
	<li>Milk</li>
	<li>Milk</li>
	<li>Rum</li>
</ul>

<script>
	var liT = document.getElementByTagName('li');
	for (var i = 0; i<liT.length; i++) {
		liT[i].addEventListener('click', function() {
			this.classList.toggle('done');
		});

		//либо!!!!!!
		// liT[i].addEventListener('click', e => {
		//	e.currentTarget.classList.toggle('done');
		// });		
	}
</script>

///////////////////////////////////////////////////////////////////////////////////
//остановить распространения события

event.preventDefault();
event.stopPropagation()
event.stopImmediatePropagation();

///////////////////////////////////////////////////////////////////////////////////
//повесили события на контенер 
//тем самым теперь у нас может быть очень много li объектов
//использовали свойсва event.target

<ul>
	<li>Milk</li>
	<li>Milk</li>
	<li>Rum</li>
</ul>

<script>
	var ulT = document.querySelector('ul');

	ulT.addEventListener('click', function(e) {
		if (e.target.tagName === 'LI') {
			e.target.classList.toggle('done');
		}
	});
</script>


















/////////////////////////////////////////////////////////////////////////////////////////////////////
патерн Модуль

var Model = (function () {
    var model = {};

    model.Entity = function() {
        this.id = null;
        this.relationship = null;
    }

    model.View = function() {
        this.id = null;
        this.type = null;
    }

    model.Action = function() {

    }

    return model;
})();
